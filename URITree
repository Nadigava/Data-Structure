package binaryTree;

public class RetoUri {
	
	Node root = null;
	
	public void insert(int value)
	    {
	        Node node = new Node(value);
	           
	        if(root == null) // si el arbol esta vacio ponemos el nodo en la raiz
	        {
	            root = node;
	        }
	        else
	        {
	            Node temp = root;
	            Node parent = null;
	            boolean left = false;
	               
	            while(temp != null)
	            {
	                parent = temp;
	                   
	                if(value < temp.value)
	                {
	                    temp = temp.left;
	                    left = true;
	                }
	                else
	                {
	                    temp = temp.right;
	                    left = false;
	                }
	                   
	            }
	               
	                temp = node;
	               
	                if(left) parent.left = temp;
	                else parent.right = temp;
	          }
	     }
	       
	        public void deleteNode(int value )
	        {
	            Node node = new Node(value);
	           
	            if(node == null) return; // si el nodo es nulo no hace nada
	            else if(node.value == value) // se compara el nodo
	            {
	               
	            }
	        }
	       
	       
	       
	        public int offSpring(Node node)
	        {
	            return (node.left != null) ? (node.right != null ? 2 : 1) : (node.right != null ? 1 : 0);
	        }
	       
	       
	       
	        public void preOrderPrint(Node node)
	        {
	            if(node != null)
	            {
	                System.out.print(node.toString());
	                preOrderPrint(node.left);
	                preOrderPrint(node.right);
	            }   
	        }
	       
	       
	        public void posOrderPrint(Node node)
	        {
	            if(node != null)
	            {
	                posOrderPrint(node.left);
	                posOrderPrint(node.right);
	                System.out.print(node.toString());
	            }   
	        }
	       
	        public void inOrderPrint(Node node)
	        {
	            if(node != null)
	            {
	                inOrderPrint(node.left);
	                System.out.print(node.toString());
	                inOrderPrint(node.right);
	            }   
	        }
	        
	        public static void main(String[] args)
	        {
	           
	            RetoUri testTree = new RetoUri();
	           
	            
	            System.out.println("Pre - Orden: ");  
	            testTree.preOrderPrint(testTree.root);
	            
	            System.out.println("In - Orden: ");
	            testTree.inOrderPrint(testTree.root);
	            
	            System.out.println("Pos - Orden: ");
	            testTree.posOrderPrint(testTree.root);
	            
	            
	               
	        }

}


