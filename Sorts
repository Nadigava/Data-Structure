import java.io.*;
import java.util.Random;


public class Sorts {
	
    public void bubbleSort(int[] unsorted)
    {
        boolean swap = false;
        int temp;
       
        do
        {
            for(int i = 0; i < (unsorted.length -1); i++)
            {
                 if(unsorted[i] > unsorted[i+1])
                 {
                         temp=unsorted[i];
                         unsorted[i] = unsorted[i+1];
                         unsorted[i+1]=temp;
                         swap=true;
                 }
            }
           
        }
       
        while(swap);
       
    }
    
    public void insertionSort (int[] unsorted)
    {
    	int temp, indexHole;
    	
    	for(int i = 1; i < unsorted.length; i++)
    	{
    		temp = unsorted[i];
    		indexHole = i;
    		
    		while(indexHole> 0 && unsorted[indexHole - 1] > temp)
    		{
    			unsorted[indexHole] = unsorted[indexHole - 1];
    			indexHole -=1;
    		}
    		unsorted[indexHole] = temp;
    	}
    }
    
    /*public int [] mergeSort(int[] unsorted)
    {
    	int size;
    	
    	if(unsorted.length > 1)
    	{
    		size = unsorted.length/2;
    		int[] left_array = new int[size];
    		int[] right_array = new int [unsorted.length - size];
    		
    		for(int i = 0; i < size; i++)
    			left_array[i] = unsorted[i];
    		
    		for(int i = size; i < unsorted.length; i++)
    			right_array[i - size] = unsorted[i];
    		
    		left_array = mergeSort(left_array);
    		right_array = mergeSort(right_array);
    		
    		unsorted = merge(left_array, right_array);
    		
    		return unsorted = merge(left_array, right_array);
    		
    	}
		return unsorted;
     }
    
    public int[] merge(int [] a, int[] b)
    {
    	int l = a.length + b.length;
    	int[] c = new int[1];
    	int index_a = 0, index_b = 0, index_c = 0;
    	
    	while(index_a < a.length && index_b < b.length)
    	{
    		if(a[index_a] < b[index_a])
    		{
    			c[index_c] = a[index_a];
    			index_a += 1;
    		}
    		else
    		{
    			c[index_c] = a[index_a];
    			index_b += 1;
    		}
    		index_c += 1;
    	}
    	while(index_a < a.length)
    	{
    		c[index_c = a[index]
    	}
	}*/
    	
     public void countingSort(int[] unsorted) 
     {
    	 int max = Integer.MIN_VALUE;
         int[] aux;
         int index = 0;
            
           for (int i = 0; i < unsorted.length; i++) 
                if (unsorted[i] > max) 
                    max = unsorted[i];
    	        aux = new int[max + 1];
    	        
    	   for(int i = 0;i < unsorted.length; i++)
    	        aux[ unsorted[i]] += 1;
    	        
    	   for(int i = 0;i < aux.length; i++)
    	        for(int j=0; j<aux[i]; j++)
    	        {
    	        unsorted[index]= i;
    	        index +=1;
    	        }       
     }
    		
    	
    		
    public int BinarySearch (int A[], int X)
    {
    			
    	int LowerBound = 0;
    	int UpperBound = A.length - 1;
    	int index = -1;
    	int middlePoint;
    		
    	while(LowerBound < UpperBound)
    	{
    		 middlePoint = (LowerBound + UpperBound)/2;
    		if (X == A[middlePoint]) 
    		{
    			index = middlePoint;
    			break;
    		}
    		else
    		{	
    			if(X<A[middlePoint])
    			{
    				UpperBound = middlePoint - 1;
    			}
    			else
    			{
    				LowerBound = middlePoint + 1;	
    			}
    		}	
    		
    	}
    	if(LowerBound == UpperBound && A[LowerBound] == X) 
    		{
    		index = LowerBound;
    		}
    	   
    	return index;
	}	

	public int BinarySearch_Recursive (int a[], int x, int lB, int uB )
	{
		int middlePoint = (lB + uB)/2;
		if(lB == uB)
		{
			if(x == a[middlePoint])
			{
				return middlePoint;
			}
			else
			{
				return -1;
			}
		}
		else
		{
			if(x == a[middlePoint])
			{
				return middlePoint;
			}
			else
			{
				if(x < a[middlePoint])
				{
					return BinarySearch_Recursive (a, x, lB, middlePoint);
				}
				else
				{
					return BinarySearch_Recursive (a, x, middlePoint +1, uB);
				}
			}
		}	
	}
	
	public int InterpolationSearch (int a[], int x)
	{
		int lowerBound = 0;
		int upperBound = a.length -1;
		int index = -1;
		int middlePoint;
		
		while(lowerBound < upperBound)
		{
			middlePoint = lowerBound + ((upperBound - lowerBound)/(a[upperBound]-a[lowerBound])) * (x - a[lowerBound]);
			if(x == a[middlePoint])
			{
				index= middlePoint;
				break;
			}
			else
			{
				if(x< a[middlePoint])
				{
					upperBound = middlePoint -1;
				}
				else
				{
					lowerBound = middlePoint + 1;
				}
			}
		}
		if(lowerBound == upperBound && a[lowerBound] == x)
		{
			index = lowerBound;
		}
		return index;
	}
	
	
    public int[] bigArray(int length)
    {
    	Random rd = new Random();
    	int[] temp = new int[length];
    	
    	for(int i = 0; i < length; i++)
    		temp[i] = rd.nextInt(10);
    	
    	return temp;
    }
     
    public void printArray(int[] array) throws IOException
    {
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
       
        for(int i=0; i < array.length; i++)
        		bw.write(array[i]+" ");
            bw.write("\n");
            bw.flush();
           
    }
    public static void main(String[] args) throws IOException
    {
    	//int[] c = {5,1,9,8,8,2,2,2,2,6,7,8,9,1};
    	int[] w = {0,1,2,3,4,5,6,7,8,9,10};
    	//int[] d = {4,6,7,9,0};
    	//System.out.println(c);
    	Sorts sorts = new Sorts();
    	//int[] a = sorts.bigArray(500);
    	//int[] b = a.clone();
    	//sorts.printArray(a);
    	/*sorts.printArray(a);
    	System.out.println(" \n");
    	sorts.bubbleSort(a);
    	sorts.printArray(a);
    	System.out.println(" \n");
    	sorts.insertionSort(a);
    	sorts.printArray(a);
    	System.out.println(" \n");
    	sorts.countingSort(a);
    	sorts.printArray(a);
    	System.out.println(" \n");
    	System.out.println("pocision: "+sorts.binarySearch(w,8));*/
    	//sorts.mergeSort(w);
    	//sorts.printArray(w);
    
    	System.out.println("Posición: "+sorts.BinarySearch(w,3));
    	System.out.println("Posición: "+sorts.BinarySearch_Recursive(w,8,0,11));
    	System.out.println("Posición: "+sorts.InterpolationSearch(w,0));
    	System.out.println(" \n");        
    }	

}
